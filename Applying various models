#TO PLOT CONFUSION MATRIX
def plot_confusion_matrix(cm, classes,normalize=False,title='Confusion matrix',cmap=plt.cm.Blues):
    
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')
        thresh = cm.max() / 2.
        for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
            plt.text(j, i, cm[i, j],horizontalalignment="center",color="white" if cm[i, j] > thresh else "black")
    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

#Applying logistic regresssion

from sklearn.linear_model import LogisticRegression
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)
model = LogisticRegression()
model.fit(x_train, y_train) 
y_pred = model.predict(x_test)
Accuracy_LR=accuracy_score(y_test, y_pred)
F1_Score_LR=f1_score(y_test,y_pred)
print( "Accuracy_LR:",accuracy_score(y_test, y_pred))
print("F1_Score_LR:",f1_score(y_test,y_pred))

cm = confusion_matrix(y_test, y_pred)
plot_confusion_matrix(cm, classes=['Fake', 'Real'])



#Apply NaiveBases
from sklearn.naive_bayes import GaussianNB
#Create a Gaussian Classifier
gnb = GaussianNB()

#Train the model using the training sets
gnb.fit(x_train, y_train)

#Predict the response for test dataset
y_pred = gnb.predict(x_test)
Accuracy_BAYES=accuracy_score(y_test, y_pred)
F1_Score_BAYES=f1_score(y_test,y_pred)
print("Accuracy_BAYES:",accuracy_score(y_test, y_pred))
print("F1_Score_BAYES:",f1_score(y_test,y_pred))

cm = confusion_matrix(y_test, y_pred)
plot_confusion_matrix(cm, classes=['Fake', 'Real'])

#Apply SVM
from sklearn.svm import SVC
svclassifier = SVC(kernel='linear')
svclassifier.fit(x_train, y_train)
y_pred = svclassifier.predict(x_test)
Accuracy_SVM=accuracy_score(y_test, y_pred)
F1_Score_SVM=f1_score(y_test,y_pred)
print("Accuracy_SVM:",accuracy_score(y_test, y_pred))
print("F1_Score_SVM:",f1_score(y_test,y_pred))

cm = confusion_matrix(y_test, y_pred)
plot_confusion_matrix(cm, classes=['Fake', 'Real'])

